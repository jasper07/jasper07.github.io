<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: openui5 | ]]></title>
  <link href="http://jasper07.secondphase.com.au/blog/categories/openui5/atom.xml" rel="self"/>
  <link href="http://jasper07.secondphase.com.au/"/>
  <updated>2015-02-20T04:08:46+11:00</updated>
  <id>http://jasper07.secondphase.com.au/</id>
  <author>
    <name><![CDATA[John Patterson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Add your own requests to SAPUI5 MockServer]]></title>
    <link href="http://jasper07.secondphase.com.au/blog/2015/01/10/add-your-own-requests-to-sapui5-mockserver/"/>
    <updated>2015-01-10T22:36:00+11:00</updated>
    <id>http://jasper07.secondphase.com.au/blog/2015/01/10/add-your-own-requests-to-sapui5-mockserver</id>
    <content type="html"><![CDATA[<p>A couple of weeks ago I was playing around with SAP HCP Trial WebIDE and noticed that the Fiori sample applications were using the MockServer for all OData Entity requests and also for the custom OData Function Imports.</p>

<p>This week I had a requirement to create a simple Function Import, the function calls the backend SAP system to determine whether or not to show a button, I used as an opportunity to investigate and learn how to add my own mock xhr request to the SAPUI5 Mockserver and thought I would share.</p>

<p>To add your own requests to a MockServer instance is quite simple, first set up the MockServer, retrieve the current requests, then add your request and then set the updated requests back to Mockerver.</p>

<pre class="language-javascript"><code>//initialize the MockServer as per normal
jQuery.sap.require("sap.ui.core.util.MockServer");
var oMockServer = new sap.ui.core.util.MockServer({
    rootUri: sServiceUrl
});
oMockServer.simulate("model/metadata.xml", "model/");
 
//add your requests to the ones already set 
try {
  jQuery.sap.require("myapp.model.mockRequests");
  var aMyRequests = myapp.model.mockRequests.getRequests();
  if (aMyRequests.length > 0) {
    oMockServer.setRequests(oMockServer.getRequests().concat(aMyRequests));
  }
} catch (oErr) {
  jQuery.sap.log.debug(oErr.message);
}
 
//start the mockserver
oMockServer.start();
</code></pre>


<p>The documentation for <a href="https://openui5.hana.ondemand.com/#docs/api/symbols/sap.ui.core.util.MockServer.html#setRequests">UI5 MockServer setRequests</a> gives a good explanation on the structure of requests</p>

<p><blockquote><p>method : &ldquo;GET&rdquo;|&ldquo;POST&rdquo;|&ldquo;DELETE|&#8221;PUT&rdquo;<br/>path : &ldquo;/path/to/resource&rdquo;<br/>response : function(xhr, param1, param2, &hellip;) { }<br/></p></blockquote></p>

<p>Here is the code I wrote for the ShowAddButton Mock call</p>

<pre class="language-javascript"><code>sap.ui.define(['jquery.sap.global'],
    function(jQuery) {
        "use strict";
        var mockRequests = {
            /**
             * This mock determines whether the '+' add button should be shown
             */
            mockShowAddButton: function() {
                return {
                    method: "GET",
                    path: new RegExp("ShowAddButton?(.*)"), 
                    response: function(oXhr, sUrlParams) {
                        jQuery.sap.log.debug("Incoming request for ShowAddButton");
                        oXhr.respondJSON(200, {}, JSON.stringify({
                            d: {
                                ShowAddButton: true
                            }
                        }));
                    }
                };
            },
            /**
             * get requests
             * @return {array} Array of mock request
             */
            getRequests: function() {
                return [mockRequests.mockShowAddButton()];
            }
        };
        return mockRequests;
    },
    true);
</code></pre>


<p>For those interested here&rsquo;s a link to the <a href="http://scn.sap.com/docs/DOC-59963">Fiori Reference Apps</a></p>

<p>in the WebIDE you can find them under File->New->Project from Sample Application</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beyond SAP Fiori's 1:1:3]]></title>
    <link href="http://jasper07.secondphase.com.au/blog/2015/01/04/beyond-sap-fioris-1-1-3/"/>
    <updated>2015-01-04T22:48:00+11:00</updated>
    <id>http://jasper07.secondphase.com.au/blog/2015/01/04/beyond-sap-fioris-1-1-3</id>
    <content type="html"><![CDATA[<p><script async="true" class="speakerdeck-embed" data-id="8086964076310132049b22819074b7b4" src="//speakerdeck.com/assets/embed.js"> </script></p>

<p>A few people have asked me to share the slides from the talk I gave at SAP DCode 2014 Las Vegas.</p>

<p>The talk was aimed at developers who had already started writing SAPUI5 apps, the objective was to highlight a variety of patterns, principles and best practices to help them take their development to the next level.</p>

<p>The takeaway points</p>

<p><strong>1. Follow JS Best Practices</strong> - a lot of the tutorials and documentation for SAPUI5 is centred around using Eclipse as an IDE, in my opinion which is shared by many others there is &ldquo;no one size fits all&rdquo;, to get the right developer workflow it is better to build your JS developer toolchain from the ground up, that way you get to know what works and why. Start by investigating how developers using other JS toolkits and frameworks set up theirs, experiment, add the additional functionality as it is needed rather than start with something that is preconfigured and abstracts away the detail making it hard to change. The best practices section covered things like the need for automating repetitive develop, build and deploy tasks using Grunt, using a distributed version control system like git to reduce the risk of introducing errors, and ensuring the quality of the code pushed back to SAP is always production ready, also covered was following Web development best practices to reduce the complexity and improve the performance of your apps etc.</p>

<p><strong>2. Don’t Build Big Apps</strong> - this is true for any programming paradigm, don’t build big apps, build lots of small ones, wire them together with events. In this section I covered the different techniques available for modularizing your code into smaller units, and then how to bring the small units together using techniques like routing, which enable you to set up the state of the application from the URL, i.e. what views need to be visible and what data needs to be shown and then how to use events to seamlessly navigate to different states of the application.</p>

<p><strong>3. Use fit-for-purposes API&rsquo;s</strong> - the inside-out approach for creating services with Netweaver Gateway sounds like a good idea, take an existing BAPI and expose it. This approach lends itself to complexity, BAPI’s are normally quite complex to start with, they have to cater for lots of different scenarios, as you come across business logic and functionality not available in the BAPI developers will often try workarounds and build the logic into the front end, you should let the data drive the application not the other way around. In this section I talked about the advantages of taking a mock model first approach. Flesh out the screens you have designed and build an information architecture. Use this as a basis for a data model to build your Gateway services. Once you have modelled your services you can easily generate mock data for the service, this will allow UI5 developers to quickly build the shell of the application and validate the completeness of the data model. Other benefits of using mock data first are that developments can happen in parallel, different parts of the UI can be developed independent of other UI and backend ABAP developments. Using the MockData Server makes it easy to create Unit and End-to-End tests allowing you to quickly find issues, perfect for quickly validating new feature request and changes made during bug fixes.</p>

<p>The Fiori 1:1:3 mantra whilst an over simplification was a very timely reminder to keep UI design simple, the same thinking should be applied to development and how we develop, regardless of the size of apps we are building, one size does not fit all, keep things simple and fit for purpose.</p>
]]></content>
  </entry>
  
</feed>
